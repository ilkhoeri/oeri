export const codes = {
  rating: '"use client";\nimport { useState } from "react";\nimport { Rating } from "@/ui/rating";\n\nfunction RatingDemo() {\n  const [value, setValue] = useState(0);\n  return <Rating value={value} onChange={setValue} size={28} color="#fab005" fractions={4} defaultValue={3.75} />;\n}',
  tabsVertical:
    'import { Tabs } from "@/ui/tabs";\n\nexport function TabsVerticalDemos() {\n  return (\n    <Tabs orientation="vertical" variant="outline" defaultValue="commit" classNames={{ root: "rounded", panel: "p-4 flex items-center justify-center text-start" }}>\n      <Tabs.List>\n        <Tabs.Tab value="branch" className="[&_svg]:aria-selected:text-blue-500" leftSection={<GitBranchIcon size={15} stroke={3} />} />\n        <Tabs.Tab value="commit" className="[&_svg]:aria-selected:text-pink-500" leftSection={<GitCommitIcon size={15} stroke={3} />} />\n        <Tabs.Tab value="pullrequest" className="[&_svg]:aria-selected:text-yellow-500" leftSection={<GitPullRequestIcon size={15} stroke={3} />} />\n      </Tabs.List>\n\n      <Tabs.Panel value="branch">\n        <div className="rounded-2xl bg-blue-600 p-4">\n          <GitBranchIcon size={32} stroke={3} />\n        </div>\n      </Tabs.Panel>\n      <Tabs.Panel value="commit">\n        <div className="rounded-2xl bg-pink-600 p-4">\n          <GitCommitIcon size={32} stroke={3} />\n        </div>\n      </Tabs.Panel>\n      <Tabs.Panel value="pullrequest">\n        <div className="rounded-2xl bg-yellow-600 p-4">\n          <GitPullRequestIcon size={32} stroke={3} />\n        </div>\n      </Tabs.Panel>\n    </Tabs>\n  );\n}',
  password: '"use client";\nimport React from "react";\nimport { Input } from "@/ui/input";\n\nexport function InputPasswordDemo() {\n  const [value, setValue] = React.useState<string>("");\n\n  return <Input.Password value={value} onChange={e => setValue(e.target.value)} />;\n}',
  avatarGroup:
    '"use client";\nimport { Avatar } from "@/ui/avatar";\nimport { useImagePopup } from "@/hooks/use-image-popup";\n\nexport function AvatarGroupDemos() {\n  useImagePopup("[data-has-popup]");\n  return (\n    <Avatar.Group gap={14} color="hsl(var(--color))" classNames={{ root: "cursor-zoom-in" }}>\n      <Avatar data-has-popup fallback="Jack" src="https://api.dicebear.com/9.x/lorelei/svg?seed=Jack" />\n      <Avatar data-has-popup fallback="Brian" src="https://api.dicebear.com/9.x/lorelei/svg?seed=Brian" />\n      <Avatar data-has-popup fallback="Re" src="https://api.dicebear.com/9.x/lorelei/svg?seed=Re" />\n      <Avatar data-has-popup fallback="Ve" src="https://api.dicebear.com/9.x/lorelei/svg?seed=ve" />\n      <Avatar data-has-popup initialLimit="4" classNames={{ fallback: "invert" }}>+99</Avatar>\n    </Avatar.Group>\n  );\n}',
  avatarWithIndicator:
    '"use client";\nimport { Avatar } from "@/ui/avatar";\nimport { Indicator } from "@/ui/indicator";\n\nexport function AvatarDemos() {\n  return (\n    <Indicator size={12} offset={4} color="#fab005" processing withBorder>\n      <Avatar fallback="Jack" className="cursor-pointer" />\n    </Indicator>\n  );\n}',
  dropdownNotification:
    '"use client";\nimport React from "react";\nimport Svg from "@/ui/svg";\nimport { cn, cvx } from "cretex";\nimport { Tabs } from "@/ui/tabs";\nimport { Times } from "@/ui/times";\nimport { Avatar } from "@/ui/avatar";\nimport { Sheets } from "@/ui/sheets";\nimport { Tooltip } from "@/ui/tooltip";\nimport { Indicator } from "@/ui/indicator";\nimport { ScrollArea } from "@/ui/scroll-area";\nimport { Button, buttonVariants } from "@/ui/button";\nimport { UserErrorIcon, UserInfoIcon, UserSuccessIcon, UserSupportIcon, UserWarningIcon } from "@/icons/*";\n\ntype NotificationStatus = "unread" | "read";\ntype NotificationPriority = "low" | "medium" | "high";\ntype NotificationType = "info" | "warning" | "error" | "success" | "message";\n\ninterface User {\n  id: string;\n  name: string;\n  image?: string;\n}\n\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: NotificationType;\n  status: NotificationStatus;\n  receivedAt: string | Date;\n  readAt?: string | Date;\n  source?: string;\n  linkUrl?: string;\n  priority?: NotificationPriority;\n  sender?: User;\n}\n\ntype NotificationsTab = {\n  key: "all" | "unread" | "read";\n  notification: Notification[];\n};\n\nconst dummyNotifications: Notification[] = [\n  {\n    id: "n1",\n    title: "System Info",\n    message: "System is running smoothly.",\n    type: "info",\n    status: "unread",\n    receivedAt: "2025-04-29T09:00:00Z",\n    priority: "low",\n    source: "system"\n  },\n  {\n    id: "n5",\n    title: "New Message from Alice",\n    message: "Hey, are you available for a quick call?",\n    type: "message",\n    status: "unread",\n    receivedAt: "2025-04-29T11:15:00Z",\n    sender: {\n      id: "u1",\n      name: "Alice Johnson",\n      image: "https://api.dicebear.com/9.x/lorelei/svg?seed=1.jpg"\n    },\n    linkUrl: "/messages/u1",\n    priority: "medium"\n  },\n  // ...\n];\n\nconst priorityVariants = cvx({\n  assign: "rounded-full size-2",\n  variants: {\n    priority: {\n      low: "bg-green-500",\n      medium: "bg-yellow-500",\n      high: "bg-red-500",\n      unknown: "bg-color"\n    }\n  }\n});\n\nexport function getNotificationTabs(notifications: Notification[]) {\n  const all = notifications;\n  const unread = notifications.filter(n => n.status === "unread");\n  const read = notifications.filter(n => n.status === "read");\n\n  return [\n    { key: "all", notification: all },\n    { key: "unread", notification: unread },\n    { key: "read", notification: read }\n  ] as NotificationsTab[];\n}\nfunction getNotifIcon(notification: Notification) {\n  if (notification.type === "message" && notification.sender?.image) {\n    return <Avatar color="white" src={notification.sender.image} fallback={notification.sender.name} />;\n  }\n\n  function wrap(content: React.ReactNode, opt: { color?: string } = {}) {\n    return (\n      <div className="relative flex size-[--size] max-h-[--size] min-h-[--size] min-w-[--size] max-w-[--size] select-none items-center justify-center overflow-hidden rounded-full p-0 [--size:38px] [&>svg]:text-[--icon-color]" {...{ style: { "--icon-color": opt?.color } as React.CSSProperties }}>\n        {content}\n      </div>\n    );\n  }\n\n  switch (notification.type) {\n    case "info":\n      return wrap(<UserInfoIcon size={32} />, { color: "#3b82f6" });\n    case "warning":\n      return wrap(<UserWarningIcon size={32} />, { color: "#eab308" });\n    case "error":\n      return wrap(<UserErrorIcon size={32} />, { color: "#ef4444" });\n    case "success":\n      return wrap(<UserSuccessIcon size={32} />, { color: "#22c55e" });\n    default:\n      return wrap(<UserSupportIcon size={32} />);\n  }\n}\nfunction markAllAsRead(notifications: Notification[]): Notification[] {\n  return notifications.map(n => (n.status === "unread" ? { ...n, status: "read", readAt: new Date().toISOString() } : n));\n}\n\nexport function DropdownNotifications() {\n  const [notifications, setNotifications] = React.useState<Notification[]>(dummyNotifications);\n  const [activeTab, setActiveTab] = React.useState<"all" | "read" | "unread">("all");\n\n  const totalNewNotifications = notifications.filter(n => n.status === "unread").length;\n\n  function handleMarkAllAsRead() {\n    const updated = markAllAsRead(notifications);\n    setNotifications(updated);\n  }\n\n  const data: NotificationsTab[] = getNotificationTabs(notifications);\n\n  const filteredNotifications = React.useMemo(() => {\n    if (activeTab === "read") return notifications.filter(n => n.status === "read");\n    if (activeTab === "unread") return notifications.filter(n => n.status === "unread");\n    return notifications;\n  }, [notifications, activeTab]);\n\n  const priorityCountMap = React.useMemo(() => {\n    const map: Record<NotificationPriority, number> = {\n      low: 0,\n      medium: 0,\n      high: 0\n    };\n\n    filteredNotifications.forEach(n => {\n      if (n.priority) {\n        map[n.priority] += 1;\n      }\n    });\n\n    return map;\n  }, [filteredNotifications]);\n\n  const uniquePriorities = (Object.entries(priorityCountMap) as [NotificationPriority, number][]).filter(([, count]) => count > 0);\n\n  return (\n    <Sheets align="end" clickOutsideToClose modal sideOffset={4} variant="dropdown">\n      <Indicator size={18} offset={2} disabled={!totalNewNotifications} label={cn(totalNewNotifications)} color="#FF5630" withBorder>\n        <Sheets.Trigger className={cn(buttonVariants({ size: "icon", variant: "unset" }), "[--sz:38px] data-[state=open]/st:bg-color data-[state=open]/st:text-background hover:data-[state=open]/st:bg-color hover:data-[state=open]/st:text-background")}>\n          <Svg size={24} currentFill="fill" className="transition-colors">\n            <path d="M8.352 20.242A4.63 4.63 0 0 0 12 22a4.63 4.63 0 0 0 3.648-1.758a27.2 27.2 0 0 1-7.296 0" />\n            <path\n              fillRule="evenodd"\n              d="M18.75 9.704V9c0-3.866-3.023-7-6.75-7S5.25 5.134 5.25 9v.704c0 .845-.24 1.671-.692 2.374L3.45 13.801c-1.011 1.574-.239 3.713 1.52 4.21a25.8 25.8 0 0 0 14.06 0c1.759-.497 2.531-2.636 1.52-4.21l-1.108-1.723a4.4 4.4 0 0 1-.693-2.374M12 5.25a.75.75 0 0 1 .75.75v4a.75.75 0 0 1-1.5 0V6a.75.75 0 0 1 .75-.75"\n              clipRule="evenodd"\n            />\n          </Svg>\n        </Sheets.Trigger>\n      </Indicator>\n      <Sheets.Content className="h-full max-h-[436px] w-96 bg-[#f2f2f2] p-4 dark:bg-[#151619]">\n        <div className="mb-2">\n          <h3 className="block text-xs font-medium text-muted-foreground">Notifications</h3>\n          <div className="flex items-center justify-between gap-6">\n            <p className="my-0 text-sm font-normal text-color">\n              {totalNewNotifications > 0 ? `You have ${totalNewNotifications}` : "Not have"} new notification{totalNewNotifications !== 1 ? "s" : ""}\n            </p>\n            <Button variant="outline" color="blue" size="sm" onClick={handleMarkAllAsRead}>\n              <span className="whitespace-nowrap text-sm">Read all</span>\n            </Button>\n          </div>\n        </div>\n\n        <Tabs defaultValue={data?.[0]?.key} value={activeTab} onValueChange={value => setActiveTab(value as "all" | "read" | "unread")} variant="pills" round={999} color={{ bg: "hsl(var(--muted))", text: "hsl(var(--color))" }}>\n          <Tabs.List gap={0}>\n            {data.map(item => (\n              <Tabs.Tab key={item.key} value={item.key} onClick={() => setActiveTab(item.key)} className="text-[13px] font-medium capitalize text-muted-foreground aria-selected:text-color">\n                {item.key}\n                {item.notification.length > 0 && <span className="absolute -right-2 -top-2 z-[200] rounded-full bg-red-500 p-1 text-[10px] font-medium leading-none text-white">{item.notification.length}</span>}\n              </Tabs.Tab>\n            ))}\n          </Tabs.List>\n\n          <ScrollArea color={{ thumb: "hsl(var(--muted-foreground))" }} classNames={{ root: "py-0.5", viewport: "max-h-[18.25rem] rounded-xl pb-px" }}>\n            {data.map(item => {\n              return (\n                <Tabs.Panel key={item.key} value={item.key} className="space-y-[3px]">\n                  {item.notification.map(notif => {\n                    const icon = getNotifIcon(notif);\n                    return (\n                      <div key={notif.id} className="group/item relative flex cursor-pointer flex-row items-center justify-start gap-2 rounded-xl border px-2 py-2.5 transition-colors hover:bg-muted-foreground/20">\n                        {icon}\n                        <div className="grid grid-flow-row">\n                          <p className="text-sm font-medium text-color">{notif.title}</p>\n                          <p className="text-xs text-muted-foreground">{notif.message}</p>\n                        </div>\n                        <div className="absolute right-1.5 top-1.5 z-[2] grid grid-flow-col items-center gap-1">\n                          <Tooltip asChild side="left" content={`${notif.priority} Priority`} classNames={{ content: "capitalize px-2 py-1 text-xs font-medium" }}>\n                            <span role="button" tabIndex={-1} aria-label={notif.source} className={priorityVariants({ ...notif })} />\n                          </Tooltip>\n                          <Times format="default" time={notif.receivedAt} className="text-xs font-medium text-muted-foreground" />\n                        </div>\n                      </div>\n                    );\n                  })}\n                </Tabs.Panel>\n              );\n            })}\n          </ScrollArea>\n        </Tabs>\n        <div className="ml-auto mt-1 grid w-max grid-flow-col items-center space-x-2 rounded-xl border px-2 py-1 empty:sr-only empty:hidden">\n          {uniquePriorities.map(([priority, count]) => (\n            <p key={priority} className="inline-flex items-center gap-1 whitespace-nowrap text-xs capitalize text-muted-foreground">\n              <span className={priorityVariants({ priority })} /> {priority} ({count})\n            </p>\n          ))}\n        </div>\n      </Sheets.Content>\n    </Sheets>\n  );\n}\n',
  checkerSwitch:
    '"use client";\nimport React from "react";\nimport { Checker } from "@/ui/checker";\nimport { SunIcon, MoonStarIcon } from "@/icons/*";\n\nfunction CheckerSwitchDemos() {\n  const [checked, setChecked] = React.useState(false);\n  \n  return (\n    <Checker\n      type="switch"\n      size={24}\n      onLabel="Dark"\n      offLabel="Light"\n      color="hsl(var(--muted))"\n      checked={checked}\n      onChange={() => setChecked(c => !c)}\n      icon={checked => (checked ? <MoonStarIcon animation size={18} /> : <SunIcon animation size={16} />)}\n      classNames={{ track: "[&_svg]:text-background", thumb: "[--switch-thumb-bd:transparent] data-[checked]:bg-background [&>svg]:data-[switch]:data-[checked]:text-color" }}\n    />\n  );\n}',
  checkerCheckbox:
    '"use client";\nimport React from "react";\nimport { Checker } from "@/ui/checker";\nimport { CheckIcon, XIcon } from "@/icons/*";\n\nfunction CheckerCheckboxDemos() {\n  return <Checker type="checkbox" defaultChecked size={22} icon={checked => (checked ? <CheckIcon animation stroke={3} /> : <XIcon animation stroke={3} />)} />;\n}',
  loaderBuffer: '"use client";\nimport React from "react";\nimport { Loader } from "@/ui/loader";\n\nfunction CheckerCheckboxDemos() {\n  return <Loader variant="buffer" color="hsl(var(--color))" size={32} />;\n}',
  loaderDots: '"use client";\nimport React from "react";\nimport { Loader } from "@/ui/loader";\n\nfunction CheckerCheckboxDemos() {\n  return <Loader variant="dots" color="hsl(var(--color))" size={32} />;\n}',
  progress:
    '"use client";\nimport React from "react";\nimport { Progress, type ProgressProps } from "@/ui/progress";\n\nexport function ProgressDemo() {\n  const [progress, setProgress] = React.useState({ details: 0, address: 0, important: 0, animated: true });\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setProgress(p => ({ ...p, details: 35, address: 28, important: 25 })), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setProgress(p => ({ ...p, animated: false })), 2850);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <Progress size={16} transitionDuration={2000} animated={progress.animated} className="m-auto max-w-2xl">\n      <Progress.Section value={progress.details} color="#0c8599">\n        <Progress.Label label="Details" />\n      </Progress.Section>\n      <Progress.Section value={progress.address} color="#c2255c">\n        <Progress.Label label="Address" />\n      </Progress.Section>\n      <Progress.Section value={progress.important} label="Important" color="#e8590c" />\n    </Progress>\n  );\n}',
  slider:
    '"use client";\nimport React from "react";\nimport { Slider } from "@/ui/slider";\n\nfunction SliderDemo() {\n  const [value, setValue] = React.useState(35);\n  const [endValue, setEndValue] = React.useState(35);\n\n  const marksLabel = [\n    { value: 25, label: "25%" },\n    { value: 50, label: "50%" },\n    { value: 75, label: "75%" }\n  ];\n\n  return (\n    <div className="flex size-full max-w-96 flex-col items-center justify-center">\n      <Slider defaultValue={35} value={value} onChange={setValue} onChangeEnd={setEndValue} marks={marksLabel} />\n    </div>\n  );\n}',
  breadcrumb:
    '"use client";\nimport React from "react";\nimport Link from "next/link";\nimport { Breadcrumb } from "@/ui/breadcrumb";\n\nfunction renamed(str: string) {\n  const words = str.split("-");\n  return words.map(word => word.charAt(0).toUpperCase() + str.slice(1).toLowerCase()).join(" ");\n}\n\nfunction BreadcrumbDemo() {\n  const pathname = "docs/web/components/breadcrumb";\n  const paths = pathname.split("/").filter(Boolean);\n  const active = (index: number) => index === paths.length - 1 || undefined;\n  const links = (index: number) => (active(index) ? `/${paths.slice(0, index + 1).join("/")}` : `/${paths.slice(0, index + 1).join("/")}`);\n  const separator = (index: number) => (index % 2 === 0 ? "+" : "-");\n\n  const items = paths.map((path, index) => (\n    <Link key={path} href={links(index)} aria-disabled={active(index)} className={merge(active(index) && "text-color")}>\n      {renamed(path)}\n    </Link>\n  ));\n\n  return <Breadcrumb gap={16} items={items} overflowWrap separator={separator} />;\n}',
  textarea:
    '"use client";\nimport React from "react";\nimport { Stack } from "@/ui/stack";\nimport { Textarea } from "@/ui/textarea";\nimport { Typography } from "@/ui/typography";\n\nfunction TextareaValidateJsonDemo() {\n  const [error, setError] = React.useState<Error | null>(null);\n\n  return (\n    <Stack className="mx-auto w-full max-w-xl">\n      <Textarea validateJson formatOnBlur validationError="Invalid JSON" onValidationError={error => setError(error)} className="h-[380px] max-h-[380px] min-h-[380px] max-w-xl" placeholder="Enter JSON here, e.g. [{}]" />\n      <Typography el="label" htmlFor="textarea-validatejson-demo" hidden={!error} className="-my-2 text-sm text-destructive">\n        {error?.message}\n      </Typography>\n      <Typography prose="muted">Enter inline text in JSON format and blur from Textarea component to format the text.</Typography>\n    </Stack>\n  );\n}',
  timeline:
    '"use client";\nimport { Timeline } from "@/ui/timeline";\nimport { GitBranchIcon, GitCommitIcon, GitPullRequestDraftIcon, GitPullRequestIcon } from "@/icons/*";\n\nconst data = [\n  {\n    id: "1",\n    title: "New branch",\n    description: "Create a new branch to start a new feature or fix bugs.",\n    icons: <GitBranchIcon size={12} className="size-[--sz] [--sz:calc(var(--tl-bullet-size)/2)]" />,\n    createdAt: new Date("2024-12-01T10:30:00")\n  },\n  {\n    id: "2",\n    title: "Commits",\n    description: "Track changes and save versions of your project with meaningful messages.",\n    icons: <GitCommitIcon size={12} className="size-[--sz] [--sz:calc(var(--tl-bullet-size)/2)]" />,\n    createdAt: new Date("2024-12-02T14:45:00")\n  },\n  {\n    id: "3",\n    title: "Pull request",\n    description: "Request to merge your branch into the main branch after completing a feature.",\n    icons: <GitPullRequestIcon size={12} className="size-[--sz] [--sz:calc(var(--tl-bullet-size)/2)]" />,\n    createdAt: new Date("2024-12-03T09:15:00")\n  },\n  {\n    id: "4",\n    title: "Code review",\n    description: "Collaboratively review changes before they are merged to ensure quality.",\n    icons: <GitPullRequestDraftIcon size={12} className="size-[--sz] [--sz:calc(var(--tl-bullet-size)/2)]" />,\n    createdAt: new Date("2024-12-03T11:00:00")\n  }\n];\n\nexport function TimelineDemo() {\n  return (\n    <Timeline bulletStyle={{ round: 8, size: 32 }} lineStyle={{ width: 1 }}>\n      {data.map(i => (\n        <Timeline.Item key={i.id} title={i.title} active={["1", "2", "4"].includes(i.id)} notice={["2", "3"].includes(i.id)} bullet={i.icons} activeStyle={{ line: "hsl(var(--color)/0.6)", ring: "transparent" }}>\n          <p className="mt-2 text-xs text-muted-foreground">{i.description}</p>\n          <time dateTime={String(i.createdAt)} className="mt-2 text-xs text-muted-foreground">\n            {String(i.createdAt)}\n          </time>\n        </Timeline.Item>\n      ))}\n    </Timeline>\n  );\n}'
};
